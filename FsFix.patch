From 71d1f1205e421197739b41bf68b7c46f24815ff5 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Wed, 24 Apr 2019 14:08:48 +1000
Subject: [PATCH 01/31] [FS] Ensure all pending withdrawals are available in
 console

---
 .../FederationGatewayFeature.cs               | 24 ++++--
 .../Interfaces/ICrossChainTransferStore.cs    |  7 ++
 .../TargetChain/CrossChainTransferStore.cs    |  6 ++
 .../TargetChain/WithdrawalHistoryProvider.cs  | 75 ++++++++++++++-----
 4 files changed, 85 insertions(+), 27 deletions(-)

diff --git a/src/Stratis.Features.FederatedPeg/FederationGatewayFeature.cs b/src/Stratis.Features.FederatedPeg/FederationGatewayFeature.cs
index 67f8d817..72384327 100644
--- a/src/Stratis.Features.FederatedPeg/FederationGatewayFeature.cs
+++ b/src/Stratis.Features.FederatedPeg/FederationGatewayFeature.cs
@@ -3,7 +3,6 @@ using System.Collections.Generic;
 using System.Linq;
 using System.Net;
 using System.Net.Http;
-using System.Net.Http.Headers;
 using System.Text;
 using System.Threading.Tasks;
 using Microsoft.Extensions.DependencyInjection;
@@ -30,11 +29,11 @@ using Stratis.Bitcoin.Interfaces;
 using Stratis.Bitcoin.P2P.Peer;
 using Stratis.Bitcoin.P2P.Protocol.Payloads;
 using Stratis.Bitcoin.Utilities;
+using Stratis.Features.FederatedPeg.Controllers;
 using Stratis.Features.FederatedPeg.Interfaces;
 using Stratis.Features.FederatedPeg.Models;
 using Stratis.Features.FederatedPeg.Notifications;
 using Stratis.Features.FederatedPeg.Payloads;
-using Stratis.Features.FederatedPeg.Controllers;
 using Stratis.Features.FederatedPeg.SourceChain;
 using Stratis.Features.FederatedPeg.TargetChain;
 using Stratis.Features.FederatedPeg.Wallet;
@@ -229,13 +228,22 @@ namespace Stratis.Features.FederatedPeg
                 benchLog.AppendLine();
             }
 
-            // Display recent withdrawals (if any).
-            // TODO: What order do these come out in?
-            List<WithdrawalModel> withdrawals = this.withdrawalHistoryProvider.GetHistory(TransfersToDisplay);
-            if (withdrawals.Count > 0)
+            List<WithdrawalModel> pendingWithdrawals = this.withdrawalHistoryProvider.GetPending();
+
+            if (pendingWithdrawals.Count > 0)
+            {
+                benchLog.AppendLine("--- Pending Withdrawals ---");
+                foreach (WithdrawalModel withdrawal in pendingWithdrawals)
+                    benchLog.AppendLine(withdrawal.ToString());
+                benchLog.AppendLine();
+            }
+
+            List<WithdrawalModel> completedWithdrawals = this.withdrawalHistoryProvider.GetHistory(TransfersToDisplay);
+
+            if (completedWithdrawals.Count > 0)
             {
-                benchLog.AppendLine("--- Recent Withdrawals ---");
-                foreach (WithdrawalModel withdrawal in withdrawals)
+                benchLog.AppendLine("--- Completed Withdrawals ---");
+                foreach (WithdrawalModel withdrawal in completedWithdrawals)
                     benchLog.AppendLine(withdrawal.ToString());
                 benchLog.AppendLine();
             }
diff --git a/src/Stratis.Features.FederatedPeg/Interfaces/ICrossChainTransferStore.cs b/src/Stratis.Features.FederatedPeg/Interfaces/ICrossChainTransferStore.cs
index 7fa52558..c92171bd 100644
--- a/src/Stratis.Features.FederatedPeg/Interfaces/ICrossChainTransferStore.cs
+++ b/src/Stratis.Features.FederatedPeg/Interfaces/ICrossChainTransferStore.cs
@@ -41,6 +41,13 @@ namespace Stratis.Features.FederatedPeg.Interfaces
         /// <returns>An array of transactions.</returns>
         Task<Dictionary<uint256, Transaction>> GetTransactionsByStatusAsync(CrossChainTransferStatus status, bool sort = false);
 
+        /// <summary>
+        /// Returns transfers based on their status.
+        /// </summary>
+        /// <param name="statuses">Set of statuses to get transfers for.</param>
+        /// <returns>Transfers for the given statuses.</returns>
+        ICrossChainTransfer[] GetTransfersByStatus(CrossChainTransferStatus[] statuses);
+
         /// <summary>
         /// Updates partial transactions in the store with signatures obtained from the passed transactions.
         /// The <see cref="CrossChainTransferStatus.FullySigned"/> status is set on fully signed transactions.
diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
index dbec96f1..d8527c96 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
@@ -1006,6 +1006,12 @@ namespace Stratis.Features.FederatedPeg.TargetChain
             }
         }
 
+        /// <inheritdoc />
+        public ICrossChainTransfer[] GetTransfersByStatus(CrossChainTransferStatus[] statuses)
+        {
+            return this.GetTransfersByStatus(statuses, false, false);
+        }
+
         /// <inheritdoc />
         public Task<Dictionary<uint256, Transaction>> GetTransactionsByStatusAsync(CrossChainTransferStatus status, bool sort = false)
         {
diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/WithdrawalHistoryProvider.cs b/src/Stratis.Features.FederatedPeg/TargetChain/WithdrawalHistoryProvider.cs
index 02b7cf47..ba13e63f 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/WithdrawalHistoryProvider.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/WithdrawalHistoryProvider.cs
@@ -10,6 +10,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
     public interface IWithdrawalHistoryProvider
     {
         List<WithdrawalModel> GetHistory(int maximumEntriesToReturn);
+        List<WithdrawalModel> GetPending();
     }
 
     public class WithdrawalHistoryProvider : IWithdrawalHistoryProvider
@@ -43,14 +44,14 @@ namespace Stratis.Features.FederatedPeg.TargetChain
         }
 
         /// <summary>
-        /// Get the history of withdrawals and statuses.
+        /// Get the history of successful withdrawals.
         /// </summary>
         /// <param name="maximumEntriesToReturn">The maximum number of entries to return.</param>
-        /// <returns>A <see cref="WithdrawalModel"/> object containing a history of withdrawals and statuses.</returns>
+        /// <returns>A <see cref="WithdrawalModel"/> object containing a history of withdrawals.</returns>
         public List<WithdrawalModel> GetHistory(int maximumEntriesToReturn)
         {
             var result = new List<WithdrawalModel>();
-            IWithdrawal[] withdrawals = this.federationWalletManager.GetWithdrawals().Take(maximumEntriesToReturn).ToArray();
+            IWithdrawal[] withdrawals = this.federationWalletManager.GetWithdrawals().Where(x=>x.BlockHash != null).Take(maximumEntriesToReturn).ToArray();
 
             if (withdrawals.Length > 0)
             {
@@ -61,22 +62,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
                     ICrossChainTransfer transfer = transfers[i];
                     var model = new WithdrawalModel();
                     model.withdrawal = withdrawals[i];
-                    string status = transfer?.Status.ToString();
-                    switch (transfer?.Status)
-                    {
-                        case CrossChainTransferStatus.FullySigned:
-                            if (this.mempoolManager.InfoAsync(model.withdrawal.Id).GetAwaiter().GetResult() != null)
-                                status += "+InMempool";
-
-                            model.SpendingOutputDetails = this.GetSpendingInfo(transfer.PartialTransaction);
-                            break;
-                        case CrossChainTransferStatus.Partial:
-                            status += " (" + transfer.GetSignatureCount(this.network) + "/" + this.federationGatewaySettings.MultiSigM + ")";
-                            model.SpendingOutputDetails = this.GetSpendingInfo(transfer.PartialTransaction);
-                            break;
-                    }
-
-                    model.TransferStatus = status;
+                    model.TransferStatus = transfer?.Status.ToString();
                     result.Add(model);
                 }
             }
@@ -84,6 +70,57 @@ namespace Stratis.Features.FederatedPeg.TargetChain
             return result;
         }
 
+        /// <summary>
+        /// Get pending withdrawals.
+        /// </summary>
+        /// <returns>A <see cref="WithdrawalModel"/> object containing pending withdrawals and statuses.</returns>
+        public List<WithdrawalModel> GetPending()
+        {
+            var result = new List<WithdrawalModel>();
+
+            // Get all Suspended, all Partial, and all FullySigned transfers.
+            ICrossChainTransfer[] inProgressTransfers = this.crossChainTransferStore.GetTransfersByStatus(new CrossChainTransferStatus[]
+            {
+                CrossChainTransferStatus.Suspended,
+                CrossChainTransferStatus.Partial,
+                CrossChainTransferStatus.FullySigned
+            });
+
+            foreach (ICrossChainTransfer transfer in inProgressTransfers)
+            {
+                var model = new WithdrawalModel();
+                model.withdrawal = new Withdrawal(
+                    transfer.DepositTransactionId,
+                    transfer.PartialTransaction.GetHash(),
+                    transfer.DepositAmount,
+                    transfer.DepositTargetAddress.GetDestinationAddress(this.network).ToString(),
+                    transfer.BlockHeight ?? 0,
+                    transfer.BlockHash
+                    );
+
+                string status = transfer?.Status.ToString();
+                switch (transfer?.Status)
+                {
+                    case CrossChainTransferStatus.FullySigned:
+                        if (this.mempoolManager.InfoAsync(model.withdrawal.Id).GetAwaiter().GetResult() != null)
+                            status += "+InMempool";
+
+                        model.SpendingOutputDetails = this.GetSpendingInfo(transfer.PartialTransaction);
+                        break;
+                    case CrossChainTransferStatus.Partial:
+                        status += " (" + transfer.GetSignatureCount(this.network) + "/" + this.federationGatewaySettings.MultiSigM + ")";
+                        model.SpendingOutputDetails = this.GetSpendingInfo(transfer.PartialTransaction);
+                        break;
+                }
+
+                model.TransferStatus = status;
+
+                result.Add(model);
+            }
+
+            return result;
+        }
+
         private string GetSpendingInfo(Transaction partialTransaction)
         {
             string ret = "";
-- 
2.17.1.windows.2


From 204e897394021b24a6589c6cdbd87c4a2b781266 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Wed, 24 Apr 2019 14:27:52 +1000
Subject: [PATCH 02/31] Required to make tests run

---
 .../Utils/SidechainFederationNodeRunner.cs                      | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/Stratis.Features.FederatedPeg.IntegrationTests/Utils/SidechainFederationNodeRunner.cs b/src/Stratis.Features.FederatedPeg.IntegrationTests/Utils/SidechainFederationNodeRunner.cs
index fd3db937..92f6deca 100644
--- a/src/Stratis.Features.FederatedPeg.IntegrationTests/Utils/SidechainFederationNodeRunner.cs
+++ b/src/Stratis.Features.FederatedPeg.IntegrationTests/Utils/SidechainFederationNodeRunner.cs
@@ -48,8 +48,8 @@ namespace Stratis.Features.FederatedPeg.IntegrationTests.Utils
                     options.UseReflectionExecutor();
                 })
                 .UseSmartContractWallet()
-                .AddFederationGateway(new FederatedPegOptions(this.counterChainNetwork))
                 .UseFederatedPegPoAMining()
+                .AddFederationGateway(new FederatedPegOptions(this.counterChainNetwork))
                 .UseMempool()
                 .UseTransactionNotification()
                 .UseBlockNotification()
-- 
2.17.1.windows.2


From b98926d6d714ff4df3d3721908a3e762c31bbc26 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Thu, 25 Apr 2019 21:12:49 +1000
Subject: [PATCH 03/31] Extra null check

---
 .../TargetChain/WithdrawalHistoryProvider.cs                    | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/WithdrawalHistoryProvider.cs b/src/Stratis.Features.FederatedPeg/TargetChain/WithdrawalHistoryProvider.cs
index ba13e63f..7933e20d 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/WithdrawalHistoryProvider.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/WithdrawalHistoryProvider.cs
@@ -91,7 +91,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
                 var model = new WithdrawalModel();
                 model.withdrawal = new Withdrawal(
                     transfer.DepositTransactionId,
-                    transfer.PartialTransaction.GetHash(),
+                    transfer.PartialTransaction?.GetHash(),
                     transfer.DepositAmount,
                     transfer.DepositTargetAddress.GetDestinationAddress(this.network).ToString(),
                     transfer.BlockHeight ?? 0,
-- 
2.17.1.windows.2


From 4810a238a7989ba18cc610bee0796555ccf0f1eb Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Thu, 25 Apr 2019 21:45:31 +1000
Subject: [PATCH 04/31] Another null check

---
 src/Stratis.Features.FederatedPeg/TargetChain/Withdrawal.cs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/Withdrawal.cs b/src/Stratis.Features.FederatedPeg/TargetChain/Withdrawal.cs
index 22eed2c5..9a4c14d0 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/Withdrawal.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/Withdrawal.cs
@@ -42,7 +42,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
         public string GetInfo()
         {
             return string.Format("Tran#={0} Dep#={1} Amount={2,12} Addr={3} BlkNum={4,8} BlkHash={5}",
-                this.Id.ToString().Substring(0, 6),
+                this.Id?.ToString().Substring(0, 6),
                 this.DepositId.ToString().Substring(0, 6),
                 this.Amount.ToString(),
                 this.TargetAddress,
-- 
2.17.1.windows.2


From c24d7f44310ff6acddad76f3415ad279797b603b Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Thu, 25 Apr 2019 21:52:08 +1000
Subject: [PATCH 05/31] TODO

---
 .../TargetChain/WithdrawalHistoryProvider.cs                   | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/WithdrawalHistoryProvider.cs b/src/Stratis.Features.FederatedPeg/TargetChain/WithdrawalHistoryProvider.cs
index 7933e20d..5046dc64 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/WithdrawalHistoryProvider.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/WithdrawalHistoryProvider.cs
@@ -43,6 +43,9 @@ namespace Stratis.Features.FederatedPeg.TargetChain
             this.mempoolManager = mempoolManager;
         }
 
+        // TODO: These can be more efficient, i.e. remove the wallet calls from GetHistory
+        // And use a different model for Withdrawals. It doesn't quite map to the Withdrawal class.
+
         /// <summary>
         /// Get the history of successful withdrawals.
         /// </summary>
-- 
2.17.1.windows.2


From 42eaf5b0202039568f9d3ac09119b43d410a5d8b Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Fri, 26 Apr 2019 12:02:25 +1000
Subject: [PATCH 06/31] Trigger CI

---
 src/Stratis.Features.FederatedPeg/FederationGatewayFeature.cs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/Stratis.Features.FederatedPeg/FederationGatewayFeature.cs b/src/Stratis.Features.FederatedPeg/FederationGatewayFeature.cs
index 72384327..e699cea6 100644
--- a/src/Stratis.Features.FederatedPeg/FederationGatewayFeature.cs
+++ b/src/Stratis.Features.FederatedPeg/FederationGatewayFeature.cs
@@ -242,7 +242,7 @@ namespace Stratis.Features.FederatedPeg
 
             if (completedWithdrawals.Count > 0)
             {
-                benchLog.AppendLine("--- Completed Withdrawals ---");
+                benchLog.AppendLine("--- Recently Completed Withdrawals ---");
                 foreach (WithdrawalModel withdrawal in completedWithdrawals)
                     benchLog.AppendLine(withdrawal.ToString());
                 benchLog.AppendLine();
-- 
2.17.1.windows.2


From 57dd2eca70eb1c49548d2946e4355710a9894f44 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Sat, 27 Apr 2019 17:21:36 +1000
Subject: [PATCH 07/31] Testing possible fix

---
 .../Wallet/FederationWalletManager.cs                  | 10 ----------
 1 file changed, 10 deletions(-)

diff --git a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
index b2c2706c..786af36d 100644
--- a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
+++ b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
@@ -874,16 +874,6 @@ namespace Stratis.Features.FederatedPeg.Wallet
                 if (!this.TransactionHasValidUTXOs(transaction, coins))
                     return false;
 
-                // Verify that there are no earlier unspent UTXOs.
-                Comparer<TransactionData> comparer = Comparer<TransactionData>.Create(DeterministicCoinOrdering.CompareTransactionData);
-                TransactionData earliestUnspent = this.Wallet.MultiSigAddress.Transactions.Where(t => t.SpendingDetails == null).OrderBy(t => t, comparer).FirstOrDefault();
-                if (earliestUnspent != null)
-                {
-                    TransactionData oldestInput = transaction.Inputs.Select(i => this.outpointLookup[i.PrevOut]).OrderByDescending(t => t, comparer).FirstOrDefault();
-                    if (oldestInput != null && DeterministicCoinOrdering.CompareTransactionData(earliestUnspent, oldestInput) < 0)
-                        return false;
-                }
-
                 // Verify that all inputs are signed.
                 if (checkSignature)
                 {
-- 
2.17.1.windows.2


From c31f33a8cb09b11845aa498ecd8db796b49992e6 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Sat, 27 Apr 2019 19:08:07 +1000
Subject: [PATCH 08/31] Amendments

---
 .../NodeSetupTests.cs                                      | 2 +-
 .../Interfaces/ICrossChainTransferStore.cs                 | 2 +-
 .../PartialTransactionsBehavior.cs                         | 7 ++-----
 .../TargetChain/PartialTransactionRequester.cs             | 2 +-
 .../TargetChain/WithdrawalExtractor.cs                     | 3 ---
 5 files changed, 5 insertions(+), 11 deletions(-)

diff --git a/src/Stratis.Features.FederatedPeg.IntegrationTests/NodeSetupTests.cs b/src/Stratis.Features.FederatedPeg.IntegrationTests/NodeSetupTests.cs
index bee024b1..7b68f058 100644
--- a/src/Stratis.Features.FederatedPeg.IntegrationTests/NodeSetupTests.cs
+++ b/src/Stratis.Features.FederatedPeg.IntegrationTests/NodeSetupTests.cs
@@ -53,7 +53,7 @@ namespace Stratis.Features.FederatedPeg.IntegrationTests
             }
         }
 
-        [Fact(Skip = "Inherently unreliable, but shows that the multiple UTXO approach allows parallel sending!")]
+        [Fact]
         public async Task ParallelWithdrawalsToSidechain()
         {
             using (var context = new SidechainTestContext())
diff --git a/src/Stratis.Features.FederatedPeg/Interfaces/ICrossChainTransferStore.cs b/src/Stratis.Features.FederatedPeg/Interfaces/ICrossChainTransferStore.cs
index 7fa52558..715bff9d 100644
--- a/src/Stratis.Features.FederatedPeg/Interfaces/ICrossChainTransferStore.cs
+++ b/src/Stratis.Features.FederatedPeg/Interfaces/ICrossChainTransferStore.cs
@@ -38,7 +38,7 @@ namespace Stratis.Features.FederatedPeg.Interfaces
         /// <summary>Returns transactions by status. Orders the results by UTXO selection order.</summary>
         /// <param name="status">The status to get the transactions for.</param>
         /// <param name="sort">Set to <c>true</c> to sort the transfers by their earliest inputs.</param>
-        /// <returns>An array of transactions.</returns>
+        /// <returns>An array of transactions by deposit ID.</returns>
         Task<Dictionary<uint256, Transaction>> GetTransactionsByStatusAsync(CrossChainTransferStatus status, bool sort = false);
 
         /// <summary>
diff --git a/src/Stratis.Features.FederatedPeg/PartialTransactionsBehavior.cs b/src/Stratis.Features.FederatedPeg/PartialTransactionsBehavior.cs
index 7ca636f5..4d3e7a4d 100644
--- a/src/Stratis.Features.FederatedPeg/PartialTransactionsBehavior.cs
+++ b/src/Stratis.Features.FederatedPeg/PartialTransactionsBehavior.cs
@@ -95,20 +95,17 @@ namespace Stratis.Features.FederatedPeg
             if (payload == null)
                 return;
 
-            // Get the template from the payload.
-            Transaction template = this.GetTemplateTransaction(payload.PartialTransaction);
-
             ICrossChainTransfer[] transfer = await this.crossChainTransferStore.GetAsync(new[] { payload.DepositId });
 
             if (transfer[0] == null)
             {
-                this.logger.LogTrace("OnMessageReceivedAsync: Transaction {0} does not exist.", template);
+                this.logger.LogTrace("OnMessageReceivedAsync: Deposit {0} does not exist.", payload.DepositId);
                 return;
             }
 
             if (transfer[0].Status != CrossChainTransferStatus.Partial)
             {
-                this.logger.LogTrace("OnMessageReceivedAsync: Transaction {0} is {1}.", template, transfer[0].Status);
+                this.logger.LogTrace("OnMessageReceivedAsync: Deposit {0} is {1}.", payload.DepositId, transfer[0].Status);
                 return;
             }
 
diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/PartialTransactionRequester.cs b/src/Stratis.Features.FederatedPeg/TargetChain/PartialTransactionRequester.cs
index 8951d814..e34ce32a 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/PartialTransactionRequester.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/PartialTransactionRequester.cs
@@ -120,7 +120,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
             foreach (KeyValuePair<uint256, Transaction> kv in kvs)
             {
                 await this.BroadcastAsync(new RequestPartialTransactionPayload(kv.Key).AddPartial(kv.Value));
-                this.logger.LogInformation("Partial template requested");
+                this.logger.LogInformation("Partial template requested for deposit {0}. TransactionID={1}", kv.Key, kv.Value.GetHash());
             }
         }
 
diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/WithdrawalExtractor.cs b/src/Stratis.Features.FederatedPeg/TargetChain/WithdrawalExtractor.cs
index e5fc26d6..3f1a0238 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/WithdrawalExtractor.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/WithdrawalExtractor.cs
@@ -35,8 +35,6 @@ namespace Stratis.Features.FederatedPeg.TargetChain
 
         private readonly Network network;
 
-        private readonly ILogger logger;
-
         private readonly BitcoinAddress multisigAddress;
 
         public WithdrawalExtractor(
@@ -45,7 +43,6 @@ namespace Stratis.Features.FederatedPeg.TargetChain
             IOpReturnDataReader opReturnDataReader,
             Network network)
         {
-            this.logger = loggerFactory.CreateLogger(this.GetType().FullName);
             this.multisigAddress = federationGatewaySettings.MultiSigAddress;
             this.opReturnDataReader = opReturnDataReader;
             this.network = network;
-- 
2.17.1.windows.2


From e97986cb1570613162017f0e2e09160d948bac35 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Sat, 27 Apr 2019 19:18:05 +1000
Subject: [PATCH 09/31] Reverse hunk

---
 .../NodeSetupTests.cs                                           | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/Stratis.Features.FederatedPeg.IntegrationTests/NodeSetupTests.cs b/src/Stratis.Features.FederatedPeg.IntegrationTests/NodeSetupTests.cs
index 7b68f058..bee024b1 100644
--- a/src/Stratis.Features.FederatedPeg.IntegrationTests/NodeSetupTests.cs
+++ b/src/Stratis.Features.FederatedPeg.IntegrationTests/NodeSetupTests.cs
@@ -53,7 +53,7 @@ namespace Stratis.Features.FederatedPeg.IntegrationTests
             }
         }
 
-        [Fact]
+        [Fact(Skip = "Inherently unreliable, but shows that the multiple UTXO approach allows parallel sending!")]
         public async Task ParallelWithdrawalsToSidechain()
         {
             using (var context = new SidechainTestContext())
-- 
2.17.1.windows.2


From 92d3dc1c581b96a7b375db31cfaef912604cabd9 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Sat, 27 Apr 2019 23:49:59 +1000
Subject: [PATCH 10/31] More logs

---
 .../TargetChain/CrossChainTransferStore.cs                  | 6 ++++++
 .../Wallet/FederationWalletManager.cs                       | 4 ++++
 2 files changed, 10 insertions(+)

diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
index dbec96f1..d535453d 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
@@ -232,6 +232,11 @@ namespace Stratis.Features.FederatedPeg.TargetChain
                     continue;
 
                 List<(Transaction, TransactionData, IWithdrawal)> walletData = this.federationWalletManager.FindWithdrawalTransactions(partialTransfer.DepositTransactionId);
+
+                bool txValidates = this.ValidateTransaction(walletData[0].Item1);
+
+                this.logger.LogTrace("Validating transfer {0}, WalletDataCount={1}, TxValid={2}", partialTransfer.DepositTransactionId, walletData.Count, txValidates);
+
                 if (walletData.Count == 1 && this.ValidateTransaction(walletData[0].Item1))
                 {
                     Transaction walletTran = walletData[0].Item1;
@@ -262,6 +267,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
                 if (partialTransfer.DepositHeight < newChainATip)
                     newChainATip = partialTransfer.DepositHeight ?? newChainATip;
 
+                this.logger.LogTrace("Going to set Suspended for DepositId={0}", partialTransfer.DepositTransactionId);
                 tracker.SetTransferStatus(partialTransfer, CrossChainTransferStatus.Suspended);
             }
 
diff --git a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
index 786af36d..22871d24 100644
--- a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
+++ b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
@@ -841,12 +841,16 @@ namespace Stratis.Features.FederatedPeg.Wallet
                     {
                         // Check that the previous outputs are only spent by this transaction.
                         if (transactionData == null || transactionData.SpendingDetails.TransactionId != transaction.GetHash())
+                        {
+                            this.logger.LogTrace("Invalid UTXOs: TransactionID={0}", transaction.GetHash());
                             return false;
+                        }
 
                         coins?.Add(new Coin(transactionData.Id, (uint)transactionData.Index, transactionData.Amount, transactionData.ScriptPubKey));
                     }
                 }
 
+                this.logger.LogTrace("Valid UTXOs for TransactionID={0}", transaction.GetHash());
                 return true;
             }
         }
-- 
2.17.1.windows.2


From 63d41c3e7b4d5a38202254d6f8f9765be6f5fbb1 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Sun, 28 Apr 2019 11:49:56 +1000
Subject: [PATCH 11/31] Optimise locks

---
 .../Interfaces/ICrossChainTransferStore.cs    | 18 ++----
 .../TargetChain/CrossChainTransferStore.cs    | 55 ++++++++++---------
 .../TargetChain/WithdrawalHistoryProvider.cs  |  4 +-
 .../Wallet/FederationWalletManager.cs         |  3 +-
 4 files changed, 36 insertions(+), 44 deletions(-)

diff --git a/src/Stratis.Features.FederatedPeg/Interfaces/ICrossChainTransferStore.cs b/src/Stratis.Features.FederatedPeg/Interfaces/ICrossChainTransferStore.cs
index 0c8d2dbb..ff7006f2 100644
--- a/src/Stratis.Features.FederatedPeg/Interfaces/ICrossChainTransferStore.cs
+++ b/src/Stratis.Features.FederatedPeg/Interfaces/ICrossChainTransferStore.cs
@@ -41,13 +41,6 @@ namespace Stratis.Features.FederatedPeg.Interfaces
         /// <returns>An array of transactions by deposit ID.</returns>
         Task<Dictionary<uint256, Transaction>> GetTransactionsByStatusAsync(CrossChainTransferStatus status, bool sort = false);
 
-        /// <summary>
-        /// Returns transfers based on their status.
-        /// </summary>
-        /// <param name="statuses">Set of statuses to get transfers for.</param>
-        /// <returns>Transfers for the given statuses.</returns>
-        ICrossChainTransfer[] GetTransfersByStatus(CrossChainTransferStatus[] statuses);
-
         /// <summary>
         /// Updates partial transactions in the store with signatures obtained from the passed transactions.
         /// The <see cref="CrossChainTransferStatus.FullySigned"/> status is set on fully signed transactions.
@@ -61,13 +54,6 @@ namespace Stratis.Features.FederatedPeg.Interfaces
         /// <returns>The updated transaction.</returns>
         Task<Transaction> MergeTransactionSignaturesAsync(uint256 depositId, Transaction[] partialTransactions);
 
-        /// <summary>
-        /// Get the cross-chain transfer information from the database, identified by the deposit transaction ids.
-        /// </summary>
-        /// <param name="depositIds">The deposit transaction ids.</param>
-        /// <returns>The cross-chain transfer information.</returns>
-        Task<ICrossChainTransfer[]> GetAsync(uint256[] depositIds);
-
         /// <summary>Determines if the store contains suspended transactions.</summary>
         /// <returns><c>True</c> if the store contains suspended transaction and <c>false</c> otherwise.</returns>
         bool HasSuspended();
@@ -92,5 +78,9 @@ namespace Stratis.Features.FederatedPeg.Interfaces
         /// </summary>
         /// <returns>The counter of the cross chain transfer for each <see cref="CrossChainTransferStatus"/> status</returns>
         Dictionary<CrossChainTransferStatus, int> GetCrossChainTransferStatusCounter();
+
+        ICrossChainTransfer[] QueryTransfersByStatus(CrossChainTransferStatus[] statuses);
+
+        ICrossChainTransfer[] QueryTransfersById(uint256[] depositIds);
     }
 }
diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
index 0456e5a9..777f1243 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
@@ -68,7 +68,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
         private readonly IFederationGatewaySettings settings;
 
         /// <summary>Provider of time functions.</summary>
-        private readonly object lockObj;
+        private readonly object writeLock;
 
         public CrossChainTransferStore(Network network, DataFolder dataFolder, ChainIndexer chainIndexer, IFederationGatewaySettings settings, IDateTimeProvider dateTimeProvider,
             ILoggerFactory loggerFactory, IWithdrawalExtractor withdrawalExtractor, IFullNode fullNode, IBlockRepository blockRepository,
@@ -93,7 +93,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
             this.withdrawalTransactionBuilder = withdrawalTransactionBuilder;
             this.withdrawalExtractor = withdrawalExtractor;
             this.dBreezeSerializer = dBreezeSerializer;
-            this.lockObj = new object();
+            this.writeLock = new object();
             this.logger = loggerFactory.CreateLogger(this.GetType().FullName);
             this.TipHashAndHeight = this.chainIndexer.GetHeader(0);
             this.NextMatureDepositHeight = 1;
@@ -114,7 +114,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
         /// <summary>Performs any needed initialisation for the database.</summary>
         public void Initialize()
         {
-            lock (this.lockObj)
+            lock (this.writeLock)
             {
                 using (DBreeze.Transactions.Transaction dbreezeTransaction = this.DBreeze.GetTransaction())
                 {
@@ -150,7 +150,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
         /// <summary>Starts the cross-chain-transfer store.</summary>
         public void Start()
         {
-            lock (this.lockObj)
+            lock (this.writeLock)
             {
                 // Remove all transient transactions from the wallet to be re-added according to the
                 // information carried in the store. This ensures that we will re-sync in the case
@@ -346,7 +346,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
         {
             return Task.Run(() =>
             {
-                lock (this.lockObj)
+                lock (this.writeLock)
                 {
                     using (DBreeze.Transactions.Transaction dbreezeTransaction = this.DBreeze.GetTransaction())
                     {
@@ -366,7 +366,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
 
             return Task.Run(() =>
             {
-                lock (this.lockObj)
+                lock (this.writeLock)
                 {
                     // Sanitize and sort the list.
                     int originalDepositHeight = this.NextMatureDepositHeight;
@@ -534,7 +534,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
 
             return Task.Run(() =>
             {
-                lock (this.lockObj)
+                lock (this.writeLock)
                 {
                     this.Synchronize();
 
@@ -790,7 +790,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
         /// <returns>Returns <c>true</c> if the store is in sync or <c>false</c> otherwise.</returns>
         private bool Synchronize()
         {
-            lock (this.lockObj)
+            lock (this.writeLock)
             {
                 HashHeightPair tipToChase = this.TipToChase();
                 if (tipToChase.Hash == this.TipHashAndHeight.HashBlock)
@@ -925,18 +925,6 @@ namespace Stratis.Features.FederatedPeg.TargetChain
             dbreezeTransaction.Insert<byte[], int>(commonTableName, NextMatureTipKey, this.NextMatureDepositHeight);
         }
 
-        /// <inheritdoc />
-        public Task<ICrossChainTransfer[]> GetAsync(uint256[] depositIds)
-        {
-            return Task.Run(() =>
-            {
-                this.Synchronize();
-
-                ICrossChainTransfer[] res = this.ValidateCrossChainTransfers(this.Get(depositIds));
-                return res;
-            });
-        }
-
         private ICrossChainTransfer[] Get(uint256[] depositId)
         {
             using (DBreeze.Transactions.Transaction dbreezeTransaction = this.DBreeze.GetTransaction())
@@ -985,7 +973,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
 
         private ICrossChainTransfer[] GetTransfersByStatus(CrossChainTransferStatus[] statuses, bool sort = false, bool validate = true)
         {
-            lock (this.lockObj)
+            lock (this.writeLock)
             {
                 this.Synchronize();
 
@@ -1012,12 +1000,6 @@ namespace Stratis.Features.FederatedPeg.TargetChain
             }
         }
 
-        /// <inheritdoc />
-        public ICrossChainTransfer[] GetTransfersByStatus(CrossChainTransferStatus[] statuses)
-        {
-            return this.GetTransfersByStatus(statuses, false, false);
-        }
-
         /// <inheritdoc />
         public Task<Dictionary<uint256, Transaction>> GetTransactionsByStatusAsync(CrossChainTransferStatus status, bool sort = false)
         {
@@ -1028,6 +1010,25 @@ namespace Stratis.Features.FederatedPeg.TargetChain
             });
         }
 
+        public ICrossChainTransfer[] QueryTransfersByStatus(CrossChainTransferStatus[] statuses)
+        {
+            var depositIds = new HashSet<uint256>();
+
+            foreach (CrossChainTransferStatus status in statuses)
+                depositIds.UnionWith(this.depositsIdsByStatus[status]);
+
+            uint256[] partialTransferHashes = depositIds.ToArray();
+            ICrossChainTransfer[] partialTransfers = this.Get(partialTransferHashes).Where(t => t != null).ToArray();
+
+            return partialTransfers.OrderBy(t => this.EarliestOutput(t.PartialTransaction), Comparer<OutPoint>.Create((x, y) =>
+                this.federationWalletManager.CompareOutpoints(x, y))).ToArray();
+        }
+
+        public ICrossChainTransfer[] QueryTransfersById(uint256[] depositIds)
+        {
+            return this.Get(depositIds);
+        }
+
         /// <summary>Persist the cross-chain transfer information into the database.</summary>
         /// <param name="dbreezeTransaction">The DBreeze transaction context to use.</param>
         /// <param name="crossChainTransfer">Cross-chain transfer information to be inserted.</param>
diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/WithdrawalHistoryProvider.cs b/src/Stratis.Features.FederatedPeg/TargetChain/WithdrawalHistoryProvider.cs
index 5046dc64..0f0a1efb 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/WithdrawalHistoryProvider.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/WithdrawalHistoryProvider.cs
@@ -58,7 +58,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
 
             if (withdrawals.Length > 0)
             {
-                ICrossChainTransfer[] transfers = this.crossChainTransferStore.GetAsync(withdrawals.Select(w => w.DepositId).ToArray()).GetAwaiter().GetResult().ToArray();
+                ICrossChainTransfer[] transfers = this.crossChainTransferStore.QueryTransfersById(withdrawals.Select(w => w.DepositId).ToArray());
 
                 for (int i = 0; i < withdrawals.Length; i++)
                 {
@@ -82,7 +82,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
             var result = new List<WithdrawalModel>();
 
             // Get all Suspended, all Partial, and all FullySigned transfers.
-            ICrossChainTransfer[] inProgressTransfers = this.crossChainTransferStore.GetTransfersByStatus(new CrossChainTransferStatus[]
+            ICrossChainTransfer[] inProgressTransfers = this.crossChainTransferStore.QueryTransfersByStatus(new CrossChainTransferStatus[]
             {
                 CrossChainTransferStatus.Suspended,
                 CrossChainTransferStatus.Partial,
diff --git a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
index 22871d24..c37afca3 100644
--- a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
+++ b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
@@ -842,7 +842,8 @@ namespace Stratis.Features.FederatedPeg.Wallet
                         // Check that the previous outputs are only spent by this transaction.
                         if (transactionData == null || transactionData.SpendingDetails.TransactionId != transaction.GetHash())
                         {
-                            this.logger.LogTrace("Invalid UTXOs: TransactionID={0}", transaction.GetHash());
+                            this.logger.LogTrace("Invalid UTXOs: TransactionID={0}, Existing spending transaction={1}, BlockHeight={2}", 
+                                transaction.GetHash(), transactionData.SpendingDetails.TransactionId, transactionData.SpendingDetails.BlockHeight);
                             return false;
                         }
 
-- 
2.17.1.windows.2


From 7899014dc266ba55dd379b51f5988bc415a634c3 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Sun, 28 Apr 2019 11:56:50 +1000
Subject: [PATCH 12/31] Fixes

---
 .../Utils/SidechainFederationNodeRunner.cs                      | 2 +-
 .../PartialTransactionsBehavior.cs                              | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/Stratis.Features.FederatedPeg.IntegrationTests/Utils/SidechainFederationNodeRunner.cs b/src/Stratis.Features.FederatedPeg.IntegrationTests/Utils/SidechainFederationNodeRunner.cs
index f119e89e..d716b108 100644
--- a/src/Stratis.Features.FederatedPeg.IntegrationTests/Utils/SidechainFederationNodeRunner.cs
+++ b/src/Stratis.Features.FederatedPeg.IntegrationTests/Utils/SidechainFederationNodeRunner.cs
@@ -50,8 +50,8 @@ namespace Stratis.Features.FederatedPeg.IntegrationTests.Utils
                     options.UsePoAWhitelistedContracts();
                 })
                 .UseSmartContractWallet()
-                .UseFederatedPegPoAMining()
                 .AddFederationGateway(new FederatedPegOptions(this.counterChainNetwork))
+                .UseFederatedPegPoAMining()
                 .UseMempool()
                 .UseTransactionNotification()
                 .UseBlockNotification()
diff --git a/src/Stratis.Features.FederatedPeg/PartialTransactionsBehavior.cs b/src/Stratis.Features.FederatedPeg/PartialTransactionsBehavior.cs
index 4d3e7a4d..6195c123 100644
--- a/src/Stratis.Features.FederatedPeg/PartialTransactionsBehavior.cs
+++ b/src/Stratis.Features.FederatedPeg/PartialTransactionsBehavior.cs
@@ -95,7 +95,7 @@ namespace Stratis.Features.FederatedPeg
             if (payload == null)
                 return;
 
-            ICrossChainTransfer[] transfer = await this.crossChainTransferStore.GetAsync(new[] { payload.DepositId });
+            ICrossChainTransfer[] transfer = this.crossChainTransferStore.QueryTransfersById(new[] { payload.DepositId });
 
             if (transfer[0] == null)
             {
-- 
2.17.1.windows.2


From 5b4aaae94809c882937e5ae6801dcf46010d8b21 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Sun, 28 Apr 2019 13:15:29 +1000
Subject: [PATCH 13/31] null check fix

---
 .../TargetChain/CrossChainTransferStore.cs                     | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
index 777f1243..af9906c4 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
@@ -1020,8 +1020,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
             uint256[] partialTransferHashes = depositIds.ToArray();
             ICrossChainTransfer[] partialTransfers = this.Get(partialTransferHashes).Where(t => t != null).ToArray();
 
-            return partialTransfers.OrderBy(t => this.EarliestOutput(t.PartialTransaction), Comparer<OutPoint>.Create((x, y) =>
-                this.federationWalletManager.CompareOutpoints(x, y))).ToArray();
+            return partialTransfers;
         }
 
         public ICrossChainTransfer[] QueryTransfersById(uint256[] depositIds)
-- 
2.17.1.windows.2


From 366c409590f7695aa84e39b289db4f7d9a1629e7 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Sun, 28 Apr 2019 13:47:55 +1000
Subject: [PATCH 14/31] IndexOutofRange

---
 .../TargetChain/CrossChainTransferStore.cs                      | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
index af9906c4..e6cdaa54 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
@@ -233,7 +233,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
 
                 List<(Transaction, TransactionData, IWithdrawal)> walletData = this.federationWalletManager.FindWithdrawalTransactions(partialTransfer.DepositTransactionId);
 
-                bool txValidates = this.ValidateTransaction(walletData[0].Item1);
+                bool txValidates = walletData.Count > 0 && this.ValidateTransaction(walletData[0].Item1);
 
                 this.logger.LogTrace("Validating transfer {0}, WalletDataCount={1}, TxValid={2}", partialTransfer.DepositTransactionId, walletData.Count, txValidates);
 
-- 
2.17.1.windows.2


From 2602b6a29ed804df3f094a378f5e0ae20838d2f1 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Sun, 28 Apr 2019 17:13:08 +1000
Subject: [PATCH 15/31] More

---
 .../Interfaces/IFederationWalletManager.cs    |  3 ++
 .../PartialTransactionsBehavior.cs            |  2 +-
 .../TargetChain/CrossChainTransferStore.cs    | 41 +++++++---------
 .../Wallet/FederationWalletManager.cs         | 48 +++++++++++++++++++
 4 files changed, 68 insertions(+), 26 deletions(-)

diff --git a/src/Stratis.Features.FederatedPeg/Interfaces/IFederationWalletManager.cs b/src/Stratis.Features.FederatedPeg/Interfaces/IFederationWalletManager.cs
index d9cef92d..637fb2ff 100644
--- a/src/Stratis.Features.FederatedPeg/Interfaces/IFederationWalletManager.cs
+++ b/src/Stratis.Features.FederatedPeg/Interfaces/IFederationWalletManager.cs
@@ -69,6 +69,9 @@ namespace Stratis.Features.FederatedPeg.Interfaces
         /// <returns><c>True</c> if all's well and <c>false</c> otherwise.</returns>
         bool ValidateTransaction(Transaction transaction, bool checkSignature = false);
 
+        FederationWalletManager.TransferValidationResult
+            ValidateCrossChainTransfer(ICrossChainTransfer partialTransfer);
+
         /// <summary>
         /// Saves the wallet into the file system.
         /// </summary>
diff --git a/src/Stratis.Features.FederatedPeg/PartialTransactionsBehavior.cs b/src/Stratis.Features.FederatedPeg/PartialTransactionsBehavior.cs
index 6195c123..f06fe2fb 100644
--- a/src/Stratis.Features.FederatedPeg/PartialTransactionsBehavior.cs
+++ b/src/Stratis.Features.FederatedPeg/PartialTransactionsBehavior.cs
@@ -115,7 +115,7 @@ namespace Stratis.Features.FederatedPeg
 
             if (oldHash != signedTransaction.GetHash())
             {
-                this.logger.LogInformation("Signed transaction (deposit={1}) to produce {2} from {3}.", payload.DepositId, oldHash, signedTransaction.GetHash());
+                this.logger.LogInformation("Signed transaction (deposit={1}) to produce {2} from {3}.", payload.DepositId, signedTransaction.GetHash(), oldHash);
 
                 // Respond back to the peer that requested a signature.
                 await this.BroadcastAsync(payload.AddPartial(signedTransaction));
diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
index e6cdaa54..2423e26b 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
@@ -231,36 +231,27 @@ namespace Stratis.Features.FederatedPeg.TargetChain
                 if (partialTransfer.Status != CrossChainTransferStatus.Partial && partialTransfer.Status != CrossChainTransferStatus.FullySigned)
                     continue;
 
-                List<(Transaction, TransactionData, IWithdrawal)> walletData = this.federationWalletManager.FindWithdrawalTransactions(partialTransfer.DepositTransactionId);
+                FederationWalletManager.TransferValidationResult result = this.federationWalletManager.ValidateCrossChainTransfer(partialTransfer);
 
-                bool txValidates = walletData.Count > 0 && this.ValidateTransaction(walletData[0].Item1);
-
-                this.logger.LogTrace("Validating transfer {0}, WalletDataCount={1}, TxValid={2}", partialTransfer.DepositTransactionId, walletData.Count, txValidates);
+                if (!result.Updated)
+                    continue;
 
-                if (walletData.Count == 1 && this.ValidateTransaction(walletData[0].Item1))
+                if (result.UpdatedStatus == CrossChainTransferStatus.SeenInBlock)
                 {
-                    Transaction walletTran = walletData[0].Item1;
-                    if (walletTran.GetHash() == partialTransfer.PartialTransaction.GetHash())
-                        continue;
-
-                    if (CrossChainTransfer.TemplatesMatch(this.network, walletTran, partialTransfer.PartialTransaction))
-                    {
-                        partialTransfer.SetPartialTransaction(walletTran);
-
-                        if (walletData[0].Item2.BlockHeight != null)
-                            tracker.SetTransferStatus(partialTransfer, CrossChainTransferStatus.SeenInBlock, walletData[0].Item2.BlockHash, (int)walletData[0].Item2.BlockHeight);
-                        else if (this.ValidateTransaction(walletTran, true))
-                            tracker.SetTransferStatus(partialTransfer, CrossChainTransferStatus.FullySigned);
-                        else
-                            tracker.SetTransferStatus(partialTransfer, CrossChainTransferStatus.Partial);
-
-                        continue;
-                    }
+                    tracker.SetTransferStatus(partialTransfer, CrossChainTransferStatus.SeenInBlock, result.UpdatedBlockHash, result.UpdatedBlockHeight);
+                }
+                else
+                {
+                    tracker.SetTransferStatus(partialTransfer, result.UpdatedStatus);
                 }
 
-                // Remove any invalid withdrawal transactions.
-                foreach (IWithdrawal withdrawal in walletData.Select(d => d.Item3))
-                    this.federationWalletManager.RemoveTransientTransactions(withdrawal.DepositId);
+                if (result.UpdatedStatus == CrossChainTransferStatus.Suspended)
+                {
+                    // The chain may have been rewound so that this transaction or its UTXO's have been lost.
+                    // Rewind our recorded chain A tip to ensure the transaction is re-built once UTXO's become available.
+                    if (partialTransfer.DepositHeight < newChainATip)
+                        newChainATip = partialTransfer.DepositHeight ?? newChainATip;
+                }
 
                 // The chain may have been rewound so that this transaction or its UTXO's have been lost.
                 // Rewind our recorded chain A tip to ensure the transaction is re-built once UTXO's become available.
diff --git a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
index c37afca3..d6da8d40 100644
--- a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
+++ b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
@@ -899,6 +899,54 @@ namespace Stratis.Features.FederatedPeg.Wallet
             }
         }
 
+        public TransferValidationResult ValidateCrossChainTransfer(ICrossChainTransfer partialTransfer)
+        {
+            lock (this.lockObject)
+            {
+                List<(Transaction, TransactionData, IWithdrawal)> walletData = this.FindWithdrawalTransactions(partialTransfer.DepositTransactionId);
+
+                bool txValidates = walletData.Count > 0 && this.ValidateTransaction(walletData[0].Item1);
+
+                this.logger.LogTrace("Validating transfer {0}, WalletDataCount={1}, TxValid={2}", partialTransfer.DepositTransactionId, walletData.Count, txValidates);
+
+                if (walletData.Count == 1 && this.ValidateTransaction(walletData[0].Item1))
+                {
+                    Transaction walletTran = walletData[0].Item1;
+                    if (walletTran.GetHash() == partialTransfer.PartialTransaction.GetHash())
+                        return new TransferValidationResult {Updated = false};
+
+                    if (CrossChainTransfer.TemplatesMatch(this.network, walletTran, partialTransfer.PartialTransaction))
+                    {
+                        partialTransfer.SetPartialTransaction(walletTran);
+
+                        if (walletData[0].Item2.BlockHeight != null)
+                            return new TransferValidationResult { Updated = true, UpdatedStatus = CrossChainTransferStatus.Partial, UpdatedBlockHash = walletData[0].Item2.BlockHash , UpdatedBlockHeight = (int) walletData[0].Item2.BlockHeight };
+                        else if (this.ValidateTransaction(walletTran, true))
+                            return new TransferValidationResult { Updated = true, UpdatedStatus = CrossChainTransferStatus.FullySigned };
+                        else
+                            return new TransferValidationResult { Updated = true, UpdatedStatus = CrossChainTransferStatus.Partial};
+                    }
+                }
+
+                // Remove any invalid withdrawal transactions.
+                foreach (IWithdrawal withdrawal in walletData.Select(d => d.Item3))
+                    this.RemoveTransientTransactions(withdrawal.DepositId);
+
+                return new TransferValidationResult{Updated = true, UpdatedStatus = CrossChainTransferStatus.Suspended};
+            }
+        }
+
+        public class TransferValidationResult
+        {
+            public bool Updated { get; set; }
+
+            public CrossChainTransferStatus UpdatedStatus { get; set; }
+
+            public int UpdatedBlockHeight { get; set; }
+
+            public uint256 UpdatedBlockHash { get; set; }
+        }
+
         /// <inheritdoc />
         public void UpdateLastBlockSyncedHeight(ChainedHeader chainedHeader)
         {
-- 
2.17.1.windows.2


From 0fb08e8c9e9cee0de3576d07c6db1a56f1ad0610 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Sun, 28 Apr 2019 18:35:31 +1000
Subject: [PATCH 16/31] Silly mistake

---
 .../TargetChain/CrossChainTransferStore.cs                | 8 --------
 1 file changed, 8 deletions(-)

diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
index 2423e26b..0a2f9450 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
@@ -252,14 +252,6 @@ namespace Stratis.Features.FederatedPeg.TargetChain
                     if (partialTransfer.DepositHeight < newChainATip)
                         newChainATip = partialTransfer.DepositHeight ?? newChainATip;
                 }
-
-                // The chain may have been rewound so that this transaction or its UTXO's have been lost.
-                // Rewind our recorded chain A tip to ensure the transaction is re-built once UTXO's become available.
-                if (partialTransfer.DepositHeight < newChainATip)
-                    newChainATip = partialTransfer.DepositHeight ?? newChainATip;
-
-                this.logger.LogTrace("Going to set Suspended for DepositId={0}", partialTransfer.DepositTransactionId);
-                tracker.SetTransferStatus(partialTransfer, CrossChainTransferStatus.Suspended);
             }
 
             if (tracker.Count == 0)
-- 
2.17.1.windows.2


From 34f913df77a0ffaa817ab91c54f1b5e995ab2957 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Sun, 28 Apr 2019 18:35:42 +1000
Subject: [PATCH 17/31] Another silly mistake

---
 .../Wallet/FederationWalletManager.cs                           | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
index d6da8d40..f5f00820 100644
--- a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
+++ b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
@@ -920,7 +920,7 @@ namespace Stratis.Features.FederatedPeg.Wallet
                         partialTransfer.SetPartialTransaction(walletTran);
 
                         if (walletData[0].Item2.BlockHeight != null)
-                            return new TransferValidationResult { Updated = true, UpdatedStatus = CrossChainTransferStatus.Partial, UpdatedBlockHash = walletData[0].Item2.BlockHash , UpdatedBlockHeight = (int) walletData[0].Item2.BlockHeight };
+                            return new TransferValidationResult { Updated = true, UpdatedStatus = CrossChainTransferStatus.SeenInBlock, UpdatedBlockHash = walletData[0].Item2.BlockHash , UpdatedBlockHeight = (int) walletData[0].Item2.BlockHeight };
                         else if (this.ValidateTransaction(walletTran, true))
                             return new TransferValidationResult { Updated = true, UpdatedStatus = CrossChainTransferStatus.FullySigned };
                         else
-- 
2.17.1.windows.2


From 1854b73fc89f698c7f9b4afecffa95f77ce9e623 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Sun, 28 Apr 2019 22:32:17 +1000
Subject: [PATCH 18/31] Fix reorg bug

---
 .../Wallet/FederationWalletSyncManager.cs                       | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletSyncManager.cs b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletSyncManager.cs
index 88d4e6bc..cfc04808 100644
--- a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletSyncManager.cs
+++ b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletSyncManager.cs
@@ -144,6 +144,8 @@ namespace Stratis.Features.FederatedPeg.Wallet
 
                     this.logger.LogInformation("Reorg detected, going back from '{0}' to '{1}'.", this.walletTip, fork);
 
+                    this.walletManager.RemoveTransientTransactions();
+
                     this.walletManager.RemoveBlocks(fork);
                     this.walletTip = fork;
 
-- 
2.17.1.windows.2


From 34bb1916f6146a641819dd3e3fb8c47141934ccd Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Mon, 29 Apr 2019 00:10:27 +1000
Subject: [PATCH 19/31] Sort incoming list

---
 .../TargetChain/CrossChainTransferStore.cs                     | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
index 0a2f9450..7f1ef4ca 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
@@ -390,6 +390,9 @@ namespace Stratis.Features.FederatedPeg.TargetChain
                             continue;
                         }
 
+                        // Ensure deposits are in a deterministic order, sort by id.
+                        deposits = deposits.OrderBy(x => x.Id).ToList();
+
                         ICrossChainTransfer[] transfers = this.ValidateCrossChainTransfers(this.Get(deposits.Select(d => d.Id).ToArray()));
                         var tracker = new StatusChangeTracker();
                         bool walletUpdated = false;
-- 
2.17.1.windows.2


From bc1d56a010011656e74764b4d549b1a80f8626e5 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Mon, 29 Apr 2019 12:12:43 +1000
Subject: [PATCH 20/31] More logs

---
 .../TargetChain/CrossChainTransferStore.cs    |  8 ++
 .../TargetChain/MaturedBlocksSyncManager.cs   | 85 +++++++++++--------
 2 files changed, 58 insertions(+), 35 deletions(-)

diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
index 7f1ef4ca..0e1c6ff5 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
@@ -347,6 +347,8 @@ namespace Stratis.Features.FederatedPeg.TargetChain
             Guard.NotNull(maturedBlockDeposits, nameof(maturedBlockDeposits));
             Guard.Assert(!maturedBlockDeposits.Any(m => m.Deposits.Any(d => d.BlockNumber != m.BlockInfo.BlockHeight || d.BlockHash != m.BlockInfo.BlockHash)));
 
+            this.logger.LogTrace("Record latest mature deposits up to block height {0}", maturedBlockDeposits.LastOrDefault()?.BlockInfo.BlockHeight);
+
             return Task.Run(() =>
             {
                 lock (this.writeLock)
@@ -390,9 +392,13 @@ namespace Stratis.Features.FederatedPeg.TargetChain
                             continue;
                         }
 
+                        this.logger.LogTrace("Will sort");
                         // Ensure deposits are in a deterministic order, sort by id.
                         deposits = deposits.OrderBy(x => x.Id).ToList();
 
+                        this.logger.LogTrace("sorted");
+
+
                         ICrossChainTransfer[] transfers = this.ValidateCrossChainTransfers(this.Get(deposits.Select(d => d.Id).ToArray()));
                         var tracker = new StatusChangeTracker();
                         bool walletUpdated = false;
@@ -452,6 +458,8 @@ namespace Stratis.Features.FederatedPeg.TargetChain
                             }
                         }
 
+                        this.logger.LogTrace("Arranged all deposits. Planning to save to db.");
+
                         using (DBreeze.Transactions.Transaction dbreezeTransaction = this.DBreeze.GetTransaction())
                         {
                             dbreezeTransaction.SynchronizeTables(transferTableName, commonTableName);
diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/MaturedBlocksSyncManager.cs b/src/Stratis.Features.FederatedPeg/TargetChain/MaturedBlocksSyncManager.cs
index a7f47b2c..9d30cef5 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/MaturedBlocksSyncManager.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/MaturedBlocksSyncManager.cs
@@ -3,9 +3,9 @@ using System.Collections.Generic;
 using System.Threading;
 using System.Threading.Tasks;
 using Microsoft.Extensions.Logging;
+using Stratis.Features.FederatedPeg.Controllers;
 using Stratis.Features.FederatedPeg.Interfaces;
 using Stratis.Features.FederatedPeg.Models;
-using Stratis.Features.FederatedPeg.Controllers;
 
 namespace Stratis.Features.FederatedPeg.TargetChain
 {
@@ -83,6 +83,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
             {
                 this.logger.LogTrace("(-)[CANCELLED]");
             }
+
         }
 
         /// <summary>Asks for blocks from another gateway node and then processes them.</summary>
@@ -90,54 +91,68 @@ namespace Stratis.Features.FederatedPeg.TargetChain
         /// <exception cref="OperationCanceledException">Thrown when <paramref name="cancellationToken"/> is cancelled.</exception>
         protected async Task<bool> SyncBatchOfBlocksAsync(CancellationToken cancellationToken = default(CancellationToken))
         {
-            int blocksToRequest = 1;
+            try
+            {
+                int blocksToRequest = 1;
 
-            // TODO why are we asking for max of 1 block and if it's not suspended then 1000? investigate this logic in maturedBlocksProvider
-            if (!this.store.HasSuspended())
-                blocksToRequest = MaxBlocksToRequest;
+                // TODO why are we asking for max of 1 block and if it's not suspended then 1000? investigate this logic in maturedBlocksProvider
+                if (!this.store.HasSuspended())
+                    blocksToRequest = MaxBlocksToRequest;
 
-            // API method that provides blocks should't give us blocks that are not mature!
-            var model = new MaturedBlockRequestModel(this.store.NextMatureDepositHeight, blocksToRequest);
+                // API method that provides blocks should't give us blocks that are not mature!
+                var model = new MaturedBlockRequestModel(this.store.NextMatureDepositHeight, blocksToRequest);
 
-            this.logger.LogDebug("Request model created: {0}:{1}, {2}:{3}.", nameof(model.BlockHeight), model.BlockHeight,
-                nameof(model.MaxBlocksToSend), model.MaxBlocksToSend);
+                this.logger.LogDebug("Request model created: {0}:{1}, {2}:{3}.", nameof(model.BlockHeight),
+                    model.BlockHeight,
+                    nameof(model.MaxBlocksToSend), model.MaxBlocksToSend);
 
-            // Ask for blocks.
-            IList<MaturedBlockDepositsModel> matureBlockDeposits = await this.federationGatewayClient.GetMaturedBlockDepositsAsync(model, cancellationToken).ConfigureAwait(false);
+                // Ask for blocks.
+                IList<MaturedBlockDepositsModel> matureBlockDeposits = await this.federationGatewayClient
+                    .GetMaturedBlockDepositsAsync(model, cancellationToken).ConfigureAwait(false);
 
-            bool delayRequired = true;
+                bool delayRequired = true;
 
-            if (matureBlockDeposits != null)
-            {
-                // Log what we've received.
-                foreach (MaturedBlockDepositsModel maturedBlockDeposit in matureBlockDeposits)
+                if (matureBlockDeposits != null)
                 {
-                    foreach (IDeposit deposit in maturedBlockDeposit.Deposits)
+                    // Log what we've received.
+                    foreach (MaturedBlockDepositsModel maturedBlockDeposit in matureBlockDeposits)
                     {
-                        this.logger.LogDebug("New deposit received BlockNumber={0}, TargetAddress='{1}', depositId='{2}', Amount='{3}'.",
-                            deposit.BlockNumber, deposit.TargetAddress, deposit.Id, deposit.Amount);
+                        foreach (IDeposit deposit in maturedBlockDeposit.Deposits)
+                        {
+                            this.logger.LogDebug(
+                                "New deposit received BlockNumber={0}, TargetAddress='{1}', depositId='{2}', Amount='{3}'.",
+                                deposit.BlockNumber, deposit.TargetAddress, deposit.Id, deposit.Amount);
+                        }
                     }
-                }
 
-                if (matureBlockDeposits.Count > 0)
-                {
-                    bool success = await this.store.RecordLatestMatureDepositsAsync(matureBlockDeposits).ConfigureAwait(false);
+                    if (matureBlockDeposits.Count > 0)
+                    {
+                        bool success = await this.store.RecordLatestMatureDepositsAsync(matureBlockDeposits)
+                            .ConfigureAwait(false);
 
-                    // If we received a portion of blocks we can ask for new portion without any delay.
-                    if (success)
-                        delayRequired = false;
-                }
-                else
-                {
-                    this.logger.LogDebug("Considering ourselves fully synced since no blocks were received");
+                        this.logger.LogTrace("Success={0}", success);
 
-                    // If we've received nothing we assume we are at the tip and should flush.
-                    // Same mechanic as with syncing headers protocol.
-                    await this.store.SaveCurrentTipAsync().ConfigureAwait(false);
+                        // If we received a portion of blocks we can ask for new portion without any delay.
+                        if (success)
+                            delayRequired = false;
+                    }
+                    else
+                    {
+                        this.logger.LogDebug("Considering ourselves fully synced since no blocks were received");
+
+                        // If we've received nothing we assume we are at the tip and should flush.
+                        // Same mechanic as with syncing headers protocol.
+                        await this.store.SaveCurrentTipAsync().ConfigureAwait(false);
+                    }
                 }
-            }
 
-            return delayRequired;
+                return delayRequired;
+            }
+            catch (Exception e)
+            {
+                this.logger.LogTrace(e.ToString());
+                throw e;
+            }
         }
 
         /// <inheritdoc />
-- 
2.17.1.windows.2


From 98b2e80501fb367c2aee4840660ad614216c344f Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Mon, 29 Apr 2019 12:36:39 +1000
Subject: [PATCH 21/31] Comparer

---
 .../TargetChain/CrossChainTransferStore.cs               | 2 +-
 .../Wallet/DeterministicCoinOrdering.cs                  | 9 +++++++++
 2 files changed, 10 insertions(+), 1 deletion(-)

diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
index 0e1c6ff5..7ed677b8 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
@@ -394,7 +394,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
 
                         this.logger.LogTrace("Will sort");
                         // Ensure deposits are in a deterministic order, sort by id.
-                        deposits = deposits.OrderBy(x => x.Id).ToList();
+                        deposits = deposits.OrderBy(x => x.Id, Comparer<uint256>.Create(DeterministicCoinOrdering.CompareUint256)).ToList();
 
                         this.logger.LogTrace("sorted");
 
diff --git a/src/Stratis.Features.FederatedPeg/Wallet/DeterministicCoinOrdering.cs b/src/Stratis.Features.FederatedPeg/Wallet/DeterministicCoinOrdering.cs
index f8c4d243..1c6aad70 100644
--- a/src/Stratis.Features.FederatedPeg/Wallet/DeterministicCoinOrdering.cs
+++ b/src/Stratis.Features.FederatedPeg/Wallet/DeterministicCoinOrdering.cs
@@ -1,5 +1,6 @@
 ﻿using System.Collections.Generic;
 using System.Linq;
+using NBitcoin;
 
 namespace Stratis.Features.FederatedPeg.Wallet
 {
@@ -54,5 +55,13 @@ namespace Stratis.Features.FederatedPeg.Wallet
 
             return 0;
         }
+
+        public static int CompareUint256(uint256 x, uint256 y)
+        {
+            if (x == y)
+                return 0;
+
+            return (x < y) ? -1 : 1;
+        }
     }
 }
-- 
2.17.1.windows.2


From 861a379a30b05fb8e227796209f7a4737e7aaa28 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Mon, 29 Apr 2019 13:17:35 +1000
Subject: [PATCH 22/31] Ordering

---
 .../TargetChain/CrossChainTransferStore.cs                 | 7 -------
 .../TargetChain/MaturedBlocksSyncManager.cs                | 5 +++++
 2 files changed, 5 insertions(+), 7 deletions(-)

diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
index 7ed677b8..2636c614 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
@@ -392,13 +392,6 @@ namespace Stratis.Features.FederatedPeg.TargetChain
                             continue;
                         }
 
-                        this.logger.LogTrace("Will sort");
-                        // Ensure deposits are in a deterministic order, sort by id.
-                        deposits = deposits.OrderBy(x => x.Id, Comparer<uint256>.Create(DeterministicCoinOrdering.CompareUint256)).ToList();
-
-                        this.logger.LogTrace("sorted");
-
-
                         ICrossChainTransfer[] transfers = this.ValidateCrossChainTransfers(this.Get(deposits.Select(d => d.Id).ToArray()));
                         var tracker = new StatusChangeTracker();
                         bool walletUpdated = false;
diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/MaturedBlocksSyncManager.cs b/src/Stratis.Features.FederatedPeg/TargetChain/MaturedBlocksSyncManager.cs
index 9d30cef5..cb56d91a 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/MaturedBlocksSyncManager.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/MaturedBlocksSyncManager.cs
@@ -1,11 +1,14 @@
 ﻿using System;
 using System.Collections.Generic;
+using System.Linq;
 using System.Threading;
 using System.Threading.Tasks;
 using Microsoft.Extensions.Logging;
+using NBitcoin;
 using Stratis.Features.FederatedPeg.Controllers;
 using Stratis.Features.FederatedPeg.Interfaces;
 using Stratis.Features.FederatedPeg.Models;
+using Stratis.Features.FederatedPeg.Wallet;
 
 namespace Stratis.Features.FederatedPeg.TargetChain
 {
@@ -117,6 +120,8 @@ namespace Stratis.Features.FederatedPeg.TargetChain
                     // Log what we've received.
                     foreach (MaturedBlockDepositsModel maturedBlockDeposit in matureBlockDeposits)
                     {
+                        maturedBlockDeposit.Deposits = maturedBlockDeposit.Deposits.OrderBy(x => x.Id, Comparer<uint256>.Create(DeterministicCoinOrdering.CompareUint256)).ToList();
+
                         foreach (IDeposit deposit in maturedBlockDeposit.Deposits)
                         {
                             this.logger.LogDebug(
-- 
2.17.1.windows.2


From 4c0064037c1a24caa5ef819ebfc7dd8a90bb1dcf Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Mon, 29 Apr 2019 14:36:34 +1000
Subject: [PATCH 23/31] More logs

---
 .../Wallet/FederationWalletManager.cs                           | 1 +
 .../Wallet/FederationWalletSyncManager.cs                       | 2 ++
 2 files changed, 3 insertions(+)

diff --git a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
index f5f00820..ce165850 100644
--- a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
+++ b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
@@ -171,6 +171,7 @@ namespace Stratis.Features.FederatedPeg.Wallet
 
         private void BroadcasterManager_TransactionStateChanged(object sender, TransactionBroadcastEntry transactionEntry)
         {
+            this.logger.LogTrace("Propagation state updating: {0} set to {1}", transactionEntry.Transaction.GetHash(), transactionEntry.State);
             this.ProcessTransaction(transactionEntry.Transaction, null, null, transactionEntry.State == State.Propagated);
         }
 
diff --git a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletSyncManager.cs b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletSyncManager.cs
index cfc04808..d5964788 100644
--- a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletSyncManager.cs
+++ b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletSyncManager.cs
@@ -245,6 +245,8 @@ namespace Stratis.Features.FederatedPeg.Wallet
         {
             Guard.NotNull(transaction, nameof(transaction));
 
+            this.logger.LogTrace("About to process transaction coming in from mempool: {0}", transaction.GetHash());
+
             this.walletManager.ProcessTransaction(transaction);
         }
 
-- 
2.17.1.windows.2


From 860306ec6266843dfb266e2598c5d4d72672c529 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Mon, 29 Apr 2019 14:48:43 +1000
Subject: [PATCH 24/31] One more log

---
 .../Wallet/FederationWalletTransactionHandler.cs                | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletTransactionHandler.cs b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletTransactionHandler.cs
index 12de9576..822a2310 100644
--- a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletTransactionHandler.cs
+++ b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletTransactionHandler.cs
@@ -220,6 +220,8 @@ namespace Stratis.Features.FederatedPeg.Wallet
             // We order the potential inputs now because we order them by information that the coin selector won't have access to.
             IEnumerable<UnspentOutputReference> orderedUnspentOutputs = DeterministicCoinOrdering.GetOrderedUnspentOutputs(context);
 
+            this.logger.LogTrace("Available ordered outputs: {0}", String.Join(",", orderedUnspentOutputs.Select(x => x.Transaction.Id.ToString() + "-" + x.Transaction.Index)));
+
             foreach (UnspentOutputReference item in orderedUnspentOutputs)
             {
                 coins.Add(ScriptCoin.Create(this.network, item.Transaction.Id, (uint)item.Transaction.Index, item.Transaction.Amount, item.Transaction.ScriptPubKey, this.walletManager.GetWallet().MultiSigAddress.RedeemScript));
-- 
2.17.1.windows.2


From 979c9dc441264209dabc93e066e7f0a4e81475a4 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Mon, 29 Apr 2019 15:48:44 +1000
Subject: [PATCH 25/31] Reversing hunk

---
 .../Wallet/FederationWalletManager.cs                  | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
index ce165850..8031d984 100644
--- a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
+++ b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
@@ -880,6 +880,16 @@ namespace Stratis.Features.FederatedPeg.Wallet
                 if (!this.TransactionHasValidUTXOs(transaction, coins))
                     return false;
 
+                // Verify that there are no earlier unspent UTXOs.
+                Comparer<TransactionData> comparer = Comparer<TransactionData>.Create(DeterministicCoinOrdering.CompareTransactionData);
+                TransactionData earliestUnspent = this.Wallet.MultiSigAddress.Transactions.Where(t => t.SpendingDetails == null).OrderBy(t => t, comparer).FirstOrDefault();
+                if (earliestUnspent != null)
+                {
+                    TransactionData oldestInput = transaction.Inputs.Select(i => this.outpointLookup[i.PrevOut]).OrderByDescending(t => t, comparer).FirstOrDefault();
+                    if (oldestInput != null && DeterministicCoinOrdering.CompareTransactionData(earliestUnspent, oldestInput) < 0)
+                        return false;
+                }
+
                 // Verify that all inputs are signed.
                 if (checkSignature)
                 {
-- 
2.17.1.windows.2


From 4490d3a0ee8fafea88ddd23aa9a886f3f1e6a6c7 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Mon, 29 Apr 2019 15:57:59 +1000
Subject: [PATCH 26/31] Remove propagation property

---
 .../Interfaces/IFederationWalletManager.cs    |  2 +-
 .../TargetChain/CrossChainTransferStore.cs    |  2 +-
 .../Wallet/FederationWalletManager.cs         | 37 +++----------------
 .../Wallet/TransactionData.cs                 |  7 ----
 4 files changed, 8 insertions(+), 40 deletions(-)

diff --git a/src/Stratis.Features.FederatedPeg/Interfaces/IFederationWalletManager.cs b/src/Stratis.Features.FederatedPeg/Interfaces/IFederationWalletManager.cs
index 637fb2ff..0efc7fe6 100644
--- a/src/Stratis.Features.FederatedPeg/Interfaces/IFederationWalletManager.cs
+++ b/src/Stratis.Features.FederatedPeg/Interfaces/IFederationWalletManager.cs
@@ -58,7 +58,7 @@ namespace Stratis.Features.FederatedPeg.Interfaces
         /// <param name="block">The block in which this transaction was included.</param>
         /// <param name="isPropagated">Transaction propagation state.</param>
         /// <returns>A value indicating whether this transaction affects the wallet.</returns>
-        bool ProcessTransaction(Transaction transaction, int? blockHeight = null, Block block = null, bool isPropagated = true);
+        bool ProcessTransaction(Transaction transaction, int? blockHeight = null, Block block = null);
 
         /// <summary>
         /// Verifies that the transaction's input UTXO's have been reserved by the wallet.
diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
index 2636c614..1f4ded6b 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
@@ -429,7 +429,7 @@ namespace Stratis.Features.FederatedPeg.TargetChain
                                 if (transaction != null)
                                 {
                                     // Reserve the UTXOs before building the next transaction.
-                                    walletUpdated |= this.federationWalletManager.ProcessTransaction(transaction, isPropagated: false);
+                                    walletUpdated |= this.federationWalletManager.ProcessTransaction(transaction);
 
                                     status = CrossChainTransferStatus.Partial;
                                 }
diff --git a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
index 8031d984..3f96775f 100644
--- a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
+++ b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
@@ -10,7 +10,6 @@ using NBitcoin.Policy;
 using Stratis.Bitcoin.AsyncWork;
 using Stratis.Bitcoin.Configuration;
 using Stratis.Bitcoin.Features.Wallet;
-using Stratis.Bitcoin.Features.Wallet.Broadcasting;
 using Stratis.Bitcoin.Features.Wallet.Interfaces;
 using Stratis.Bitcoin.Utilities;
 using Stratis.Features.FederatedPeg.Interfaces;
@@ -89,9 +88,6 @@ namespace Stratis.Features.FederatedPeg.Wallet
         /// <summary>An object capable of storing <see cref="FederationWallet"/>s to the file system.</summary>
         private readonly FileStorage<FederationWallet> fileStorage;
 
-        /// <summary>The broadcast manager.</summary>
-        private readonly IBroadcasterManager broadcasterManager;
-
         /// <summary>Provider of time functions.</summary>
         private readonly IDateTimeProvider dateTimeProvider;
 
@@ -132,8 +128,7 @@ namespace Stratis.Features.FederatedPeg.Wallet
             INodeLifetime nodeLifetime,
             IDateTimeProvider dateTimeProvider,
             IFederationGatewaySettings federationGatewaySettings,
-            IWithdrawalExtractor withdrawalExtractor,
-            IBroadcasterManager broadcasterManager = null) // no need to know about transactions the node broadcasted
+            IWithdrawalExtractor withdrawalExtractor)
         {
             Guard.NotNull(loggerFactory, nameof(loggerFactory));
             Guard.NotNull(network, nameof(network));
@@ -155,24 +150,11 @@ namespace Stratis.Features.FederatedPeg.Wallet
             this.asyncProvider = asyncProvider;
             this.nodeLifetime = nodeLifetime;
             this.fileStorage = new FileStorage<FederationWallet>(dataFolder.WalletPath);
-            this.broadcasterManager = broadcasterManager;
             this.dateTimeProvider = dateTimeProvider;
             this.federationGatewaySettings = federationGatewaySettings;
             this.withdrawalExtractor = withdrawalExtractor;
             this.outpointLookup = new Dictionary<OutPoint, TransactionData>();
             this.isFederationActive = false;
-
-            // register events
-            if (this.broadcasterManager != null)
-            {
-                this.broadcasterManager.TransactionStateChanged += this.BroadcasterManager_TransactionStateChanged;
-            }
-        }
-
-        private void BroadcasterManager_TransactionStateChanged(object sender, TransactionBroadcastEntry transactionEntry)
-        {
-            this.logger.LogTrace("Propagation state updating: {0} set to {1}", transactionEntry.Transaction.GetHash(), transactionEntry.State);
-            this.ProcessTransaction(transactionEntry.Transaction, null, null, transactionEntry.State == State.Propagated);
         }
 
         public void Start()
@@ -209,9 +191,6 @@ namespace Stratis.Features.FederatedPeg.Wallet
         /// <inheritdoc />
         public void Stop()
         {
-            if (this.broadcasterManager != null)
-                this.broadcasterManager.TransactionStateChanged -= this.BroadcasterManager_TransactionStateChanged;
-
             this.asyncLoop?.Dispose();
             this.SaveWallet();
         }
@@ -348,7 +327,7 @@ namespace Stratis.Features.FederatedPeg.Wallet
                 bool walletUpdated = false;
                 foreach (Transaction transaction in block.Transactions.Where(t => !(t.IsCoinBase && t.TotalOut == Money.Zero)))
                 {
-                    bool trxFound = this.ProcessTransaction(transaction, chainedHeader.Height, block, true);
+                    bool trxFound = this.ProcessTransaction(transaction, chainedHeader.Height, block);
                     if (trxFound)
                     {
                         walletUpdated = true;
@@ -368,7 +347,7 @@ namespace Stratis.Features.FederatedPeg.Wallet
         }
 
         /// <inheritdoc />
-        public bool ProcessTransaction(Transaction transaction, int? blockHeight = null, Block block = null, bool isPropagated = true)
+        public bool ProcessTransaction(Transaction transaction, int? blockHeight = null, Block block = null)
         {
             Guard.NotNull(transaction, nameof(transaction));
             uint256 hash = transaction.GetHash();
@@ -409,7 +388,7 @@ namespace Stratis.Features.FederatedPeg.Wallet
                     // Check if the outputs contain one of our addresses.
                     if (this.Wallet.MultiSigAddress.ScriptPubKey == utxo.ScriptPubKey)
                     {
-                        this.AddTransactionToWallet(transaction, utxo, blockHeight, block, isPropagated);
+                        this.AddTransactionToWallet(transaction, utxo, blockHeight, block);
                         foundReceivingTrx = true;
                     }
                 }
@@ -540,7 +519,7 @@ namespace Stratis.Features.FederatedPeg.Wallet
         /// <param name="blockHeight">Height of the block.</param>
         /// <param name="block">The block containing the transaction to add.</param>
         /// <param name="isPropagated">Propagation state of the transaction.</param>
-        private void AddTransactionToWallet(Transaction transaction, TxOut utxo, int? blockHeight = null, Block block = null, bool isPropagated = true)
+        private void AddTransactionToWallet(Transaction transaction, TxOut utxo, int? blockHeight = null, Block block = null)
         {
             Guard.NotNull(transaction, nameof(transaction));
             Guard.NotNull(utxo, nameof(utxo));
@@ -568,8 +547,7 @@ namespace Stratis.Features.FederatedPeg.Wallet
                     CreationTime = DateTimeOffset.FromUnixTimeSeconds(block?.Header.Time ?? transaction.Time),
                     Index = index,
                     ScriptPubKey = script,
-                    Hex = transaction.ToHex(),
-                    IsPropagated = isPropagated
+                    Hex = transaction.ToHex()
                 };
 
                 // Add the Merkle proof to the (non-spending) transaction.
@@ -603,9 +581,6 @@ namespace Stratis.Features.FederatedPeg.Wallet
                 {
                     foundTransaction.MerkleProof = new MerkleBlock(block, new[] { transactionHash }).PartialMerkleTree;
                 }
-
-                if (isPropagated)
-                    foundTransaction.IsPropagated = true;
             }
 
             this.TransactionFoundInternal(script);
diff --git a/src/Stratis.Features.FederatedPeg/Wallet/TransactionData.cs b/src/Stratis.Features.FederatedPeg/Wallet/TransactionData.cs
index f6d62aec..a238bb44 100644
--- a/src/Stratis.Features.FederatedPeg/Wallet/TransactionData.cs
+++ b/src/Stratis.Features.FederatedPeg/Wallet/TransactionData.cs
@@ -52,13 +52,6 @@ namespace Stratis.Features.FederatedPeg.Wallet
         [JsonProperty(PropertyName = "hex", NullValueHandling = NullValueHandling.Ignore)]
         public string Hex { get; set; }
 
-        /// <summary>
-        /// Propagation state of this transaction.
-        /// </summary>
-        /// <remarks>Assume it's <c>true</c> if the field is <c>null</c>.</remarks>
-        [JsonProperty(PropertyName = "isPropagated", NullValueHandling = NullValueHandling.Ignore)]
-        public bool? IsPropagated { get; set; }
-
         [JsonProperty(PropertyName = "spendingDetails", NullValueHandling = NullValueHandling.Ignore)]
         public SpendingDetails SpendingDetails { get; set; }
 
-- 
2.17.1.windows.2


From 186d2ab8c8adcc8b3c19b4001d31ce2f7cb8184d Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Mon, 29 Apr 2019 16:02:37 +1000
Subject: [PATCH 27/31] Patch fix

---
 .../Interfaces/IFederationWalletManager.cs                      | 2 +-
 .../Wallet/FederationWalletManager.cs                           | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/Stratis.Features.FederatedPeg/Interfaces/IFederationWalletManager.cs b/src/Stratis.Features.FederatedPeg/Interfaces/IFederationWalletManager.cs
index 0efc7fe6..637fb2ff 100644
--- a/src/Stratis.Features.FederatedPeg/Interfaces/IFederationWalletManager.cs
+++ b/src/Stratis.Features.FederatedPeg/Interfaces/IFederationWalletManager.cs
@@ -58,7 +58,7 @@ namespace Stratis.Features.FederatedPeg.Interfaces
         /// <param name="block">The block in which this transaction was included.</param>
         /// <param name="isPropagated">Transaction propagation state.</param>
         /// <returns>A value indicating whether this transaction affects the wallet.</returns>
-        bool ProcessTransaction(Transaction transaction, int? blockHeight = null, Block block = null);
+        bool ProcessTransaction(Transaction transaction, int? blockHeight = null, Block block = null, bool isPropagated = true);
 
         /// <summary>
         /// Verifies that the transaction's input UTXO's have been reserved by the wallet.
diff --git a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
index 3f96775f..cc0d7f44 100644
--- a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
+++ b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
@@ -347,7 +347,7 @@ namespace Stratis.Features.FederatedPeg.Wallet
         }
 
         /// <inheritdoc />
-        public bool ProcessTransaction(Transaction transaction, int? blockHeight = null, Block block = null)
+        public bool ProcessTransaction(Transaction transaction, int? blockHeight = null, Block block = null, bool isPropagated = true)
         {
             Guard.NotNull(transaction, nameof(transaction));
             uint256 hash = transaction.GetHash();
-- 
2.17.1.windows.2


From ec7a25a83cbbd526e67ce6ebc829d3734e414c84 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Mon, 29 Apr 2019 18:09:50 +1000
Subject: [PATCH 28/31] Set all to suspended

---
 .../TargetChain/CrossChainTransferStore.cs    | 28 +++++++++++++++++++
 1 file changed, 28 insertions(+)

diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
index 1f4ded6b..c39be55c 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
@@ -213,8 +213,27 @@ namespace Stratis.Features.FederatedPeg.TargetChain
         /// <returns>Returns the list of transfers, possible with updated statuses.</returns>
         private ICrossChainTransfer[] ValidateCrossChainTransfers(ICrossChainTransfer[] crossChainTransfers = null)
         {
+            bool setAllSuspended = false;
+
             if (crossChainTransfers == null)
             {
+                // If there are Suspended transactions with a depositid before Partial or FullySigned transactions, then start over. They need to happen in order.
+                // TODO: Inefficient right now.
+                HashSet<uint256> suspended = this.depositsIdsByStatus[CrossChainTransferStatus.Suspended];
+                IOrderedEnumerable<uint256> orderedSuspended = suspended.OrderBy(x => x, Comparer<uint256>.Create(DeterministicCoinOrdering.CompareUint256));
+                uint256 lowestSuspended = orderedSuspended.FirstOrDefault();
+
+                IEnumerable<uint256> partialAndFullySigned = this.depositsIdsByStatus[CrossChainTransferStatus.Partial].Union(this.depositsIdsByStatus[CrossChainTransferStatus.FullySigned]);
+                IOrderedEnumerable<uint256> orderedPartialAndFullySigned = partialAndFullySigned.OrderBy(x => x, Comparer<uint256>.Create(DeterministicCoinOrdering.CompareUint256));
+                uint256 highestPartial = orderedPartialAndFullySigned.LastOrDefault();
+
+                if (lowestSuspended != null 
+                    && highestPartial != null
+                    && lowestSuspended < highestPartial)
+                {
+                    setAllSuspended = true;
+                }
+
                 crossChainTransfers = this.Get(
                     this.depositsIdsByStatus[CrossChainTransferStatus.Partial].Union(
                         this.depositsIdsByStatus[CrossChainTransferStatus.FullySigned]).ToArray());
@@ -225,6 +244,15 @@ namespace Stratis.Features.FederatedPeg.TargetChain
 
             foreach (ICrossChainTransfer partialTransfer in crossChainTransfers)
             {
+                if (setAllSuspended)
+                {
+                    tracker.SetTransferStatus(partialTransfer,CrossChainTransferStatus.Suspended);
+                    // The chain may have been rewound so that this transaction or its UTXO's have been lost.
+                    // Rewind our recorded chain A tip to ensure the transaction is re-built once UTXO's become available.
+                    if (partialTransfer.DepositHeight < newChainATip)
+                        newChainATip = partialTransfer.DepositHeight ?? newChainATip;
+                }
+
                 if (partialTransfer == null)
                     continue;
 
-- 
2.17.1.windows.2


From 443bd6f79d357298860e2a8b32c63268e6ef719c Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Mon, 29 Apr 2019 18:52:27 +1000
Subject: [PATCH 29/31] Adjusting wallet as we go

---
 .../TargetChain/CrossChainTransferStore.cs                     | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
index c39be55c..6d71998b 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
@@ -247,10 +247,13 @@ namespace Stratis.Features.FederatedPeg.TargetChain
                 if (setAllSuspended)
                 {
                     tracker.SetTransferStatus(partialTransfer,CrossChainTransferStatus.Suspended);
+                    this.federationWalletManager.RemoveTransientTransactions(partialTransfer.DepositTransactionId);
                     // The chain may have been rewound so that this transaction or its UTXO's have been lost.
                     // Rewind our recorded chain A tip to ensure the transaction is re-built once UTXO's become available.
                     if (partialTransfer.DepositHeight < newChainATip)
                         newChainATip = partialTransfer.DepositHeight ?? newChainATip;
+
+                    continue;
                 }
 
                 if (partialTransfer == null)
-- 
2.17.1.windows.2


From fd029929110070adee4631dc4b24db3ce5f40e62 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Mon, 29 Apr 2019 22:39:03 +1000
Subject: [PATCH 30/31] A couple reversions

---
 .../TargetChain/CrossChainTransferStore.cs    | 34 +-----------
 .../Wallet/FederationWalletManager.cs         | 53 +++++++++++++++++--
 2 files changed, 51 insertions(+), 36 deletions(-)

diff --git a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
index 6d71998b..313cb7ca 100644
--- a/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
+++ b/src/Stratis.Features.FederatedPeg/TargetChain/CrossChainTransferStore.cs
@@ -213,30 +213,10 @@ namespace Stratis.Features.FederatedPeg.TargetChain
         /// <returns>Returns the list of transfers, possible with updated statuses.</returns>
         private ICrossChainTransfer[] ValidateCrossChainTransfers(ICrossChainTransfer[] crossChainTransfers = null)
         {
-            bool setAllSuspended = false;
-
             if (crossChainTransfers == null)
             {
-                // If there are Suspended transactions with a depositid before Partial or FullySigned transactions, then start over. They need to happen in order.
-                // TODO: Inefficient right now.
-                HashSet<uint256> suspended = this.depositsIdsByStatus[CrossChainTransferStatus.Suspended];
-                IOrderedEnumerable<uint256> orderedSuspended = suspended.OrderBy(x => x, Comparer<uint256>.Create(DeterministicCoinOrdering.CompareUint256));
-                uint256 lowestSuspended = orderedSuspended.FirstOrDefault();
-
                 IEnumerable<uint256> partialAndFullySigned = this.depositsIdsByStatus[CrossChainTransferStatus.Partial].Union(this.depositsIdsByStatus[CrossChainTransferStatus.FullySigned]);
-                IOrderedEnumerable<uint256> orderedPartialAndFullySigned = partialAndFullySigned.OrderBy(x => x, Comparer<uint256>.Create(DeterministicCoinOrdering.CompareUint256));
-                uint256 highestPartial = orderedPartialAndFullySigned.LastOrDefault();
-
-                if (lowestSuspended != null 
-                    && highestPartial != null
-                    && lowestSuspended < highestPartial)
-                {
-                    setAllSuspended = true;
-                }
-
-                crossChainTransfers = this.Get(
-                    this.depositsIdsByStatus[CrossChainTransferStatus.Partial].Union(
-                        this.depositsIdsByStatus[CrossChainTransferStatus.FullySigned]).ToArray());
+                crossChainTransfers = this.Get(partialAndFullySigned.ToArray());
             }
 
             var tracker = new StatusChangeTracker();
@@ -244,18 +224,6 @@ namespace Stratis.Features.FederatedPeg.TargetChain
 
             foreach (ICrossChainTransfer partialTransfer in crossChainTransfers)
             {
-                if (setAllSuspended)
-                {
-                    tracker.SetTransferStatus(partialTransfer,CrossChainTransferStatus.Suspended);
-                    this.federationWalletManager.RemoveTransientTransactions(partialTransfer.DepositTransactionId);
-                    // The chain may have been rewound so that this transaction or its UTXO's have been lost.
-                    // Rewind our recorded chain A tip to ensure the transaction is re-built once UTXO's become available.
-                    if (partialTransfer.DepositHeight < newChainATip)
-                        newChainATip = partialTransfer.DepositHeight ?? newChainATip;
-
-                    continue;
-                }
-
                 if (partialTransfer == null)
                     continue;
 
diff --git a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
index cc0d7f44..0bd1ad7e 100644
--- a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
+++ b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
@@ -668,10 +668,57 @@ namespace Stratis.Features.FederatedPeg.Wallet
             {
                 this.logger.LogTrace("Spending transaction ID '{0}' is being confirmed, updating. BlockHeight={1}", spendingTransactionId, blockHeight);
 
-                // Update the block height.
-                if (spentTransaction.SpendingDetails.BlockHeight == null && blockHeight != null)
+                // If we are in the process of reorging, the dumb cross chain transfer store may have spent this in another transaction. 
+                // Update to the new spending details.
+
+                // TODO: If this works, optimise this whole method.
+
+                if (blockHeight != null)
                 {
-                    spentTransaction.SpendingDetails.BlockHeight = blockHeight;
+
+                    List<PaymentDetails> payments = new List<PaymentDetails>();
+                    foreach (TxOut paidToOutput in paidToOutputs)
+                    {
+                        // Figure out how to retrieve the destination address.
+                        string destinationAddress = string.Empty;
+                        ScriptTemplate scriptTemplate = paidToOutput.ScriptPubKey.FindTemplate(this.network);
+                        switch (scriptTemplate.Type)
+                        {
+                            // Pay to PubKey can be found in outputs of staking transactions.
+                            case TxOutType.TX_PUBKEY:
+                                PubKey pubKey =
+                                    PayToPubkeyTemplate.Instance.ExtractScriptPubKeyParameters(
+                                        paidToOutput.ScriptPubKey);
+                                destinationAddress = pubKey.GetAddress(this.network).ToString();
+                                break;
+                            // Pay to PubKey hash is the regular, most common type of output.
+                            case TxOutType.TX_PUBKEYHASH:
+                                destinationAddress = paidToOutput.ScriptPubKey.GetDestinationAddress(this.network)
+                                    .ToString();
+                                break;
+                            case TxOutType.TX_NONSTANDARD:
+                            case TxOutType.TX_SCRIPTHASH:
+                                destinationAddress = paidToOutput.ScriptPubKey.GetDestinationAddress(this.network)
+                                    .ToString();
+                                break;
+                            case TxOutType.TX_MULTISIG:
+                            case TxOutType.TX_NULL_DATA:
+                            case TxOutType.TX_SEGWIT:
+                                break;
+                        }
+                    }
+
+                    SpendingDetails spendingDetails = new SpendingDetails
+                    {
+                        TransactionId = transaction.GetHash(),
+                        Payments = payments,
+                        CreationTime = DateTimeOffset.FromUnixTimeSeconds(block?.Header.Time ?? transaction.Time),
+                        BlockHeight = blockHeight,
+                        Hex = transaction.ToHex(),
+                        IsCoinStake = transaction.IsCoinStake == false ? (bool?)null : true
+                    };
+
+                    spentTransaction.SpendingDetails = spendingDetails;
                 }
 
                 // Update the block time to be that of the block in which the transaction is confirmed.
-- 
2.17.1.windows.2


From 4c277ca29e6d26137c02510871d5361ed851a683 Mon Sep 17 00:00:00 2001
From: Jordan Andrews <jordandrews@hotmail.com>
Date: Mon, 29 Apr 2019 23:31:55 +1000
Subject: [PATCH 31/31] Reversing hunk

---
 .../Wallet/FederationWalletManager.cs         | 53 ++-----------------
 1 file changed, 3 insertions(+), 50 deletions(-)

diff --git a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
index 0bd1ad7e..cc0d7f44 100644
--- a/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
+++ b/src/Stratis.Features.FederatedPeg/Wallet/FederationWalletManager.cs
@@ -668,57 +668,10 @@ namespace Stratis.Features.FederatedPeg.Wallet
             {
                 this.logger.LogTrace("Spending transaction ID '{0}' is being confirmed, updating. BlockHeight={1}", spendingTransactionId, blockHeight);
 
-                // If we are in the process of reorging, the dumb cross chain transfer store may have spent this in another transaction. 
-                // Update to the new spending details.
-
-                // TODO: If this works, optimise this whole method.
-
-                if (blockHeight != null)
+                // Update the block height.
+                if (spentTransaction.SpendingDetails.BlockHeight == null && blockHeight != null)
                 {
-
-                    List<PaymentDetails> payments = new List<PaymentDetails>();
-                    foreach (TxOut paidToOutput in paidToOutputs)
-                    {
-                        // Figure out how to retrieve the destination address.
-                        string destinationAddress = string.Empty;
-                        ScriptTemplate scriptTemplate = paidToOutput.ScriptPubKey.FindTemplate(this.network);
-                        switch (scriptTemplate.Type)
-                        {
-                            // Pay to PubKey can be found in outputs of staking transactions.
-                            case TxOutType.TX_PUBKEY:
-                                PubKey pubKey =
-                                    PayToPubkeyTemplate.Instance.ExtractScriptPubKeyParameters(
-                                        paidToOutput.ScriptPubKey);
-                                destinationAddress = pubKey.GetAddress(this.network).ToString();
-                                break;
-                            // Pay to PubKey hash is the regular, most common type of output.
-                            case TxOutType.TX_PUBKEYHASH:
-                                destinationAddress = paidToOutput.ScriptPubKey.GetDestinationAddress(this.network)
-                                    .ToString();
-                                break;
-                            case TxOutType.TX_NONSTANDARD:
-                            case TxOutType.TX_SCRIPTHASH:
-                                destinationAddress = paidToOutput.ScriptPubKey.GetDestinationAddress(this.network)
-                                    .ToString();
-                                break;
-                            case TxOutType.TX_MULTISIG:
-                            case TxOutType.TX_NULL_DATA:
-                            case TxOutType.TX_SEGWIT:
-                                break;
-                        }
-                    }
-
-                    SpendingDetails spendingDetails = new SpendingDetails
-                    {
-                        TransactionId = transaction.GetHash(),
-                        Payments = payments,
-                        CreationTime = DateTimeOffset.FromUnixTimeSeconds(block?.Header.Time ?? transaction.Time),
-                        BlockHeight = blockHeight,
-                        Hex = transaction.ToHex(),
-                        IsCoinStake = transaction.IsCoinStake == false ? (bool?)null : true
-                    };
-
-                    spentTransaction.SpendingDetails = spendingDetails;
+                    spentTransaction.SpendingDetails.BlockHeight = blockHeight;
                 }
 
                 // Update the block time to be that of the block in which the transaction is confirmed.
-- 
2.17.1.windows.2

